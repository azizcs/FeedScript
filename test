export default async function ({ execution_id }) {
  const { violations, threshold } = await executionsClient.getTaskExecutionResult({
    execution_id,
    id: "predict_disk_full_capacity" // Your prediction task ID
  });

  // Build HTML content
  let html = `
    <h3>Disk Capacity Forecast</h3>
    <table border="1" style="border-collapse:collapse">
      <tr>
        <th>Disk</th><th>Host</th><th>Current</th><th>Days Left</th><th>Full On</th>
      </tr>
  `;

  violations?.forEach(v => {
    html += `
      <tr>
        <td>${v.diskName}</td>
        <td>${v.hostName}</td>
        <td>${v.currentUsage}%</td>
        <td>${v.daysUntilFull}</td>
        <td>${new Date(v.predictedDate).toLocaleDateString()}</td>
      </tr>
    `;
  });

  html += violations?.length
    ? `</table><p>Threshold: ${threshold}%</p>`
    : `<tr><td colspan="5">No disks predicted to reach full capacity</td></tr></table>`;

  return {
    subject: `[Disk Alert] ${violations?.length || 0} disks reaching capacity`,
    body: html,
    isHtml: true
  };
}



To	your-team@company.com (hardcoded or use a variable)
Subject	{{format_disk_email.result.subject}}
Body	{{format_disk_email.result.body}}
Is HTML	{{format_disk_email.result.isHtml}}



{
  "violations": [{
    "diskName": "sda1",
    "hostName": "prod-db-01",
    "currentUsage": 85,
    "daysUntilFull": 14,
    "predictedDate": "2023-12-25T00:00:00Z"
  }],
  "threshold": 80
}

<div id="decommission-notice" style="background-color: #ff0000; color: white; padding: 15px; text-align: center; font-weight: bold;">
    NOTICE: This application will be decommissioned on [DATE]. Please transition to <a href="Page=Duty" style="color: white; text-decoration: underline;">[New System Name]</a> for maintenance requests.
</div>

<script>
    // Keep banner visible even if user closes it
    localStorage.setItem('hideDecommissionNotice', 'false');
</script>

Hi Evelyn,

I wanted to share an update on what I’ve been working on regarding the TivoliEvent app.

I’ve been investigating the timeout error and found that the issue was caused by a script attempting to move a very large volume of data—millions of rows dating back to 2011—to a destination database. The root cause appears to be a non-functional connection string for that destination database.

After reviewing the situation with David and Jagroop, we initially planned to rebuild the app and update the destination connection string. However, this task was later called off, as the TivoliEvent app is going to be decommissioned.

All investigations were carried out in the DEV environment, and no code modifications were made during this process.

I’m now looking into the current “Column out of range SQL” error. My initial assessment suggests it might be due to a mismatch between the column names in the source and destination databases, but I’ll be investigating it further.




# This uses the same authentication as your browser
powershell -Command "Invoke-WebRequest -Uri 'YOUR_SHAREPOINT_URL' -OutFile 'download.csv' -UseDefaultCredentials -UseBasicParsing"



powershell -Command "
$headers = @{
    'User-Agent' = 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36'
    'Accept' = '*/*'
}
Invoke-WebRequest -Uri 'YOUR_SHAREPOINT_URL' -Headers $headers -OutFile 'download.csv' -UseDefaultCredentials
"

























